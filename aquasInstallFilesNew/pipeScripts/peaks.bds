#!/usr/bin/env bds
                                        #vim: syntax=java

## Prior parameters
include "basicFunctions"

## Main body
main() 

wait
## Functions description

void main() {

    out_dir = mkdir(out_dir)
    string tag_
    string ctl_tag_
    int xcor_qc_num #number of qc files

    init_chipseq()
    call_peaks()
}

void init_chipseq() {
    ## Initial checking
    errorMsg("ctl")
    errorMsg("true_rep")

    callpeak = get_conf_val(callpeak, ["callpeak"]) #if no succsses, then it will return current value of callpeak
    if (!is_callpeak_spp())	error("Peak caller $callpeak is not supported!")	

    pr = getN("pr") #pseudo replicate

    ## Read the input for tag and ctl_tag
    possibleInps := ["tag", "ctl_tag"]

    for (string key : possibleInps){
        if (getNumInpCmdChk(key) != 1)\
        error("Wrong input!\n\
		It has to be 1 of $possibleInps and no numbers in names.\n\
		Other inputs are ignored.\n")
    }

                                        # Read the input
    tag_ = get("tag")
    chkInpFile(tag_, "tag", 0)

    ctl_tag_ = get("ctl_tag")
    chkInpFile(ctl_tag_, "ctl_tag", 0)
    
    ## Read the input for xcor
    xcor_qc_num = getNumInpCmdChk("xcor_qc")
    
    if(xcor_qc_num == 0)\
    error("Wrong input!\n\
		No xcor_qc is provided.\n")

    if(xcor_qc_num == 1)\
    rep = getN("rep") #otherwise we do not need rep
    else errorMsg("rep")
}

void call_peaks() { #probably should be rewritten later

    print("\n[Start] Peak \n\n")

    if (is_callpeak_spp()) 	_call_peaks("spp", nth)

    wait
    print("\n[Done] Peak \n\n")
}

void _call_peaks(string pc, int nth_peak) { 

    ## Length of fragment calculation
    real fraglenTmp = 0.0
    for(int rep = 1; rep <= xcor_qc_num; rep++){
        xcor_qc_tmp := get_xcor_qc(rep)
        label := (rep == 1)? "xcor_qc or xcor_qc1 (depending on a sequence)" : "xcor_qc" + rep
        chkInpFile(xcor_qc_tmp, label, 1)

        fraglenTmp += get_fraglen(xcor_qc_tmp).parseReal()
    }
    
    real xcor_qc_num_real = xcor_qc_num #need to do like that because of java syntax
    fraglenTmp = round(fraglenTmp/xcor_qc_num_real)
    string fraglen = fraglenTmp
    
    ## Directories and labels
    string peak_o_dir = mkdir("$out_dir/peak/$pc") #the root for all peaks
    string label
    string label_ctl
    string hrchy 		

    if (xcor_qc_num == 1){ #one xcor file
        if(pr != 0){
            peak_o_dir = mkdir( "$peak_o_dir/pseudo_reps/rep$rep/pr$pr" )
            label = "rep$rep-pr$pr"
            hrchy 	:= "pseudo_reps/rep$rep/pr$pr"
        } else { #true replicates
            peak_o_dir = mkdir("$peak_o_dir/rep$rep")
            label = "rep$rep"
            hrchy = "rep$rep"
        }

        label_ctl = "ctl$rep"

    } else { #pool case, i.e. several xcor files
        if(pr != 0){ 
            peak_o_dir = mkdir("$peak_o_dir/pooled_pseudo_reps/ppr$pr")
            label = "ppr" + pr
            hrchy = "pooled_pseudo_reps/ppr$pr"
        } else { #true replicates
            peak_o_dir = mkdir("$peak_o_dir/pooled_rep")
            label = "pooled"
            hrchy = "pooled_rep"
        }

        label_ctl = "ctl, pooled"
    }

    ## Call peaks
    string regionPeak, regionPeakClip, regionPeakClipSort # #original, tmp, tmpSorted
    string regionPeakBb #final
    string asTable, asFile = "regionPeak.as"
    
    regionPeakOrig := _call_peaks(pc, tag_, ctl_tag_, fraglen, peak_o_dir,\
                             label, label_ctl, nth_peak, hrchy) #returns .gz file
    
    ## Transform to BigBed
    peakToBigBed(regionPeakOrig)
}

string _call_peaks(string peakcaller, string tag, string tag_ctl, string fraglen, \
                   string peak_o_dir, string label, string label_ctl, \
                   int nth_peak, string hrchy) {
                       
                       if (peakcaller == "spp") {

                           string regionPeak, score, pdf 
                           (regionPeak, score, pdf) \
                           = _spp(tag, tag_ctl, fraglen, peak_o_dir, label, label_ctl, nth_peak, hrchy)
                           wait
                           
                           return regionPeak #use regionpeak instead of narrowpeak
                       }
                       ## Other methods should be included below
                   }
