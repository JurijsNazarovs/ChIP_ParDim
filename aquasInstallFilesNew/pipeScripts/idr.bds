#!/usr/bin/env bds
#vim: syntax=java

## Prior parameters
include "basicFunctions"

## Main body
main() 

## Functions description

void main() { 
  out_dir = mkdir(out_dir)
  string peaks
  int numRep
  int repName

  init_chipseq()
  do_idr() 
}

void init_chipseq() {
  ## Initial checking
  callpeak = get_conf_val(callpeak, ["callpeak"])
  if (!is_callpeak_spp()) error("IDR supports just spp peaks")

     errorMsg("ctl")
     errorMsg("pr")	
     
     ## Read input
     possibleInps := "peak"
     numRep = getNumInpCmdChk(possibleInps)	
     
     # Other check points
     if (getNumInpCmdChk("peak_pooled")  > 1) error("No more than 1 pooled peak can be provided!")
	peakPooled := get("peak_pooled") #search for peak_pooled

	if (numRep == 0 && peakPooled == "") error("No peaks of reps or pooled peak are provided!")
	   if (peakPooled == "" && numRep > 2) error("If pooled peak is provided, the number of peaks can't be higer than 2!")

	      ## Read parameters
	      true_rep = get_conf_val_bool(true_rep, ["true_rep"])
	      if (true_rep && (numRep !=2 || peakPooled == "")) error("Not enough arguments to do IDR for true replicates!\n\
		Should be: peak1, peak2, peak_pooled")

	         if (numRep == 1 ){
		      if(!true_rep && getNumInpCmdChk("peak_pr") != 2)\
			    error("Wrong input!\n\
		With true_rep = false and just 1 peak input\n\
		2 peak_pr inputs have to be provided in the form\n\
		peak_pr1 and peak_pr2\n")

		        repName = getN("rep") #otherwise we do not need rep
	            } else errorMsg("rep")
}

void do_idr() {
  print("\n[Start] IDR \n\n")

  string peak_pooled, peak_ppr1, peak_ppr2
  string{} peak, peak_pr1, peak_pr2  #peaks: map with key ("$rep")

  ## Get input
  # After this procedure some of peaks defined above can be empty.

  for (int rep = 0; rep <= numRep; rep++) { #rep == 0: pooled
	for (int pse = 0; pse <= 2; pse++) { #pse == 0: true rep

	      if (true_rep && pse > 0) continue

		 peak_ := get_peak(rep, pse)
		 
		 if ((peak_ != "") && !path_exists(peak_)){
		      suffix1 := rep==0 ? "replicate" : "replicate $rep"
		      suffix2 := rep==0 ? "pseudo-replicate $pse" : "pseudo-replicate $pse for replicate $rep"
		      prefix := (rep==0 ? "pooled " : "") + (pse==0 ? suffix1 : suffix2)
		      
		      print("$prefix: \n\t$peak_"+"\n")
		      error("File not found!\n")
		    }

		    if (rep == 0) {
			 if (pse == 0)		peak_pooled 	= peak_
			    else if (pse == 1)	peak_ppr1 	= peak_
				    else if (pse == 2)	peak_ppr2 	= peak_
		       }
		       else {
		      if (pse == 0){
			   label := (rep == 1)? "peak or peak1 (depending on a sequence)" : "peak" + rep
			   chkInpFile(peak_, label, 1)
			   peak{"$rep"} = peak_
			 }
			 else if (pse == 1)	peak_pr1{"$rep"} = peak_
				 else if (pse == 2)	peak_pr2{"$rep"} = peak_
		    }
	    }
      }

      ## Do IDR
      flTasks := 0 #number of completed tasks
      idr_o_dir := mkdir("$out_dir/peak/idr")

      string{} idr_tr, idr_pr
      string idr_ppr

      string[] idrTmp

      # IDR: paired sum of peaks + peak_pooled
      if(numRep > 1 && peak_pooled != ""){
	  for ( int i = 1; i <= numRep; i++ ){
		for ( int j = i+1; j <= numRep; j++ ){
		      idr_true_o_dir 	:= mkdir("$idr_o_dir/true_reps/rep$i-rep$j")

		      idrTmp = _idr2(peak{"$i"}, peak{"$j"}, peak_pooled, idr_thresh, "signal.value",\
				         idr_true_o_dir, "rep$i-rep$j", "peak_spp", ["rep$i","rep$j","pooled"], "true_reps/rep$i-rep$j")
		      
		      wait

		      idr_tr{"$i,$j"} = idrTmp[0]
		      flTasks++
		      print("IDR: peak$i + peak$j + peak_pooled was done.\n")
		    }
	      }
	}


	# IDR: peaki_pr1 + peaki_pr2 + peaki
	for (int i = 1; i <= numRep; i++) {
	      if (!true_rep && peak_pr1{"$i"} != "" && peak_pr2{"$i"} != "") {

		   if (numRep == 1){
			idr_pr_o_dir := mkdir("$idr_o_dir/pseudo_reps/rep$repName")

			idrTmp = _idr2(peak_pr1{"$i"}, peak_pr2{"$i"}, peak{"$i"}, idr_thresh, "signal.value",\
					       idr_pr_o_dir, "rep$repName-pr", "peak_spp", ["rep$repName-pr1","rep$repName-pr2","rep$i"],\
					       "pseudo_reps/rep$repName")
		      } else {
			idr_pr_o_dir := mkdir("$idr_o_dir/pseudo_reps/rep$i")

			idrTmp = _idr2(peak_pr1{"$i"}, peak_pr2{"$i"}, peak{"$i"}, idr_thresh, "signal.value",\
					       idr_pr_o_dir, "rep$i-pr", "peak_spp", ["rep$i-pr1","rep$i-pr2","rep$i"], "pseudo_reps/rep$i")
		      }
		      
		      wait

		      idr_pr{i} = idrTmp[0]
		      flTasks++

		      string label1, label2, label3

		      if (numRep == 1){
			   label1 = "peak$numRep" + "_pr1"
			   label2 = "peak$numRep" + "_pr2"
			   label3 = "peak$numRep"
			 } else {
			   label1 = "peak$i" + "_pr1"
			   label2 = "peak$i" + "_pr2"
			   label3 = "peak$i"
			 }

			 print("IDR: $label1 + $label2 + $label3 was done.\n")
		 }
	    }

	    # IDR: peak_ppr1 + peak_ppr2 + peak_pooled
	    if (!true_rep && peak_ppr1 != "" && peak_ppr2 != "" && peak_pooled != "") {
		 idr_ppr_o_dir := mkdir("$idr_o_dir/pooled_pseudo_reps")

		 idrTmp = _idr2(peak_ppr1, peak_ppr2, peak_pooled, idr_thresh, "signal.value",\
		                           idr_ppr_o_dir, "ppr", "peak_spp", ["ppr1","ppr2","pooled"], "pooled_pseudo_reps")
		 
		 wait

		 idr_ppr = idrTmp[0]
		 flTasks++
		 print("IDR: peak_pooled + peak_ppr1 + peak_ppr2 was done.\n")
	       }

	       ## Get final idr qc score, use idr final idr narrow peak files from true, pseudo and pooled pseudo reps	
	       wait
	       qc_o_dir := mkdir("$out_dir/qc") #create qc output dir.
	       if (idr_tr != "" && idr_ppr != ""){
	            idrOptCons := _idr_final_qc(idr_tr, idr_pr, idr_ppr, idr_o_dir, qc_o_dir, "")
                    idrOptCons = idrOptCons.tail() #delete first element with qc score
                    

                    ## Transform to BigBed
                    for (string regionPeakOrig : idrOptCons){
                          peakToBigBed(regionPeakOrig)
                        }
                        
                    wait
		    flTasks++
	          }

	          if (flTasks == 0) error("Nothing was done. Please, check the input!")
                     
                   print("\n[End] IDR \n\n")
}
