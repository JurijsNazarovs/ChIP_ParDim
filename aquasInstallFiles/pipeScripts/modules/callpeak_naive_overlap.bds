#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "report.bds"


string _naive_overlap_peak( string filetype, string peak_pooled, string peak_rep1, string peak_rep2, \
			    string o_dir, string label, string label_peak, string hrchy ) {

	prefix 	:= replace_dir( rm_ext( peak_pooled, \
				["regionPeak","regionpeak","narrowPeak","narrowpeak",\
				 "broadPeak","broadpeak","gappedPeak","gappedpeak",filetype] ), o_dir )

	peak_PooledInRep1AndRep2 	:= "$prefix.PooledInRep1AndRep2.$filetype.gz"
	peak_final 			:= "$prefix.naive_overlap.$filetype.gz"

	awk_param := _get_awk_param( filetype ) 
	cut_param := _get_cut_param( filetype )

	in 	:= [ peak_pooled, peak_rep1, peak_rep2 ]
	out 	:= peak_final
	
	taskName:= "naive_overlap_thresh " + label
	timeout := 3600 // to get queued fast

	wait_par( cpus )
	tid := task( out<-in ) {

		sys $shcmd_init

		sys zcat -f $peak_pooled > $peak_pooled.tmp
                sys zcat -f $peak_rep1 > $peak_rep1.tmp
                sys zcat -f $peak_rep2 > $peak_rep2.tmp

		//# Find pooled peaks that overlap Rep1 and Rep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys intersectBed -wo -a $peak_pooled.tmp -b $peak_rep1.tmp | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f $cut_param | sort | uniq | \
			intersectBed -wo -a stdin -b $peak_rep2.tmp | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f $cut_param | sort | uniq | gzip -c > $peak_PooledInRep1AndRep2

		//# Combine peak lists
		sys zcat $peak_PooledInRep1AndRep2 | sort | uniq | gzip -c > $peak_final

		sys rm -f $peak_PooledInRep1AndRep2
		sys rm -f $peak_pooled.tmp $peak_rep1.tmp $peak_rep2.tmp

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	graph_in  := ["$label_peak"+"_(rep1)","$label_peak"+"_(rep1-pr1)","$label_peak"+"_(rep1-pr2)"]
	graph_out := ["$label_peak"+"_(overlap)"]
	peakcaller := filetype=="regionpeak" ? "spp" : "macs2"
	hrchy_out := ["L1_peak/$peakcaller/overlap/$label"+"_overlap"]

	_add_to_graphviz( graph_in, in, graph_out, [out], "naive_overlap_($label)", grp_color_naive_overlap )
	_add_to_filetable( hrchy_out, [out] )
		   
	return peak_final
}

// peaks = [peak_rep1, peak_rep2, ...]
string _naive_overlap_peak( string filetype, string peak_pooled, string[] peaks, \
			    string peak_ppr1, string peak_ppr2, \
			    string o_dir, string label, string label_peak, string hrchy ) {

	prefix 	:= replace_dir( rm_ext( peak_pooled, \
				["regionPeak","regionpeak","narrowPeak","narrowpeak",\
				 "broadPeak","broadpeak","gappedPeak","gappedpeak",filetype] ), o_dir )

	peak_PooledInReps 		:= "$prefix.PooledInReps.$filetype.gz"
	peak_PooledInPsRep1AndPsRep2 	:= "$prefix.PooledInPsRep1AndPsRep2.$filetype.gz"
	peak_final 			:= "$prefix.naive_overlap.$filetype.gz"

	awk_param := _get_awk_param( filetype ) 
	cut_param := _get_cut_param( filetype )

	string command
	for (int i=0;i<peaks.size();i++) {
		if ( i == 0 ) {
			command += "intersectBed -wo -a <(zcat -f $peak_pooled) -b <(zcat -f " + peaks[i] + ") | awk 'BEGIN{FS=\"\t\";OFS=\"\t\"} $awk_param' | cut -f $cut_param | sort | uniq | "
		}
		else {
			command += "intersectBed -wo -a stdin -b <(zcat -f " + peaks[i] + ") | awk 'BEGIN{FS=\"\t\";OFS=\"\t\"} $awk_param' | cut -f $cut_param | sort | uniq | "
		}		
	}
	command += "gzip -c > $peak_PooledInReps"

	string command2
	if ( peak_ppr1 != "" )  {
		command2 = "intersectBed -wo -a <(zcat -f $peak_pooled) -b <(zcat -f $peak_ppr1) | awk 'BEGIN{FS=\"\t\";OFS=\"\t\"} $awk_param' | cut -f $cut_param | sort | uniq | " + \
		 	   "intersectBed -wo -a stdin -b <(zcat -f $peak_ppr2) |    awk 'BEGIN{FS=\"\t\";OFS=\"\t\"} $awk_param' | cut -f $cut_param | sort | uniq | " + \
			   "gzip -c > $peak_PooledInPsRep1AndPsRep2"
	}
	else {
		command2 = "echo"
		peak_PooledInPsRep1AndPsRep2 = ""
	}

	in 	:= [ peak_pooled ] + peaks + [peak_ppr1, peak_ppr2]
	out 	:= peak_final
	
	taskName:= "naive_overlap_thresh " + label

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		//# Find pooled peaks that overlap Rep1 and Rep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys $command

		//# Find pooled peaks that overlap PseudoRep1 and PseudoRep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys $command2

		//# Combine peak lists
		sys zcat $peak_PooledInReps $peak_PooledInPsRep1AndPsRep2 | sort | uniq | gzip -c > $peak_final

		sys rm -f $peak_PooledInReps $peak_PooledInPsRep1AndPsRep2

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	graph_in  := ["$label_peak"+"_(pooled)"]
	for (int rep=1;rep<=peaks.size();rep++) graph_in += ["$label_peak"+"_(rep$rep)"]
	graph_in += ["$label_peak"+"_(ppr1)","$label_peak"+"_(ppr2)"]
	graph_out := ["$label_peak"+"_(overlap)"]

	peakcaller := filetype=="regionpeak" ? "spp" : "macs2"
	hrchy_out := ["L1_peak/$peakcaller/overlap/$label"+"_overlap"]

	_add_to_graphviz( graph_in, in, graph_out, [out], "naive_overlap_($label)", grp_color_naive_overlap )
	_add_to_filetable( hrchy_out, [out] )

	return peak_final
}

string _get_awk_param( string filetype ) {

	if ( filetype.toLower() == "narrowpeak" ) {

		return "{s1=$3-$2; s2=$13-$12; if (($21/s1 >= 0.5) || ($21/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "regionpeak" ) {

		return "{s1=$3-$2; s2=$13-$12; if (($21/s1 >= 0.5) || ($21/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		return "{s1=$3-$2; s2=$12-$11; if (($19/s1 >= 0.5) || ($19/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		return "{s1=$3-$2; s2=$18-$17; if (($31/s1 >= 0.5) || ($31/s2 >= 0.5)) {print $0}}"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}
}

string _get_cut_param( string filetype ) {

	if ( filetype.toLower() == "narrowpeak" ) {

		return "1-10"
	}
	else if ( filetype.toLower() == "regionpeak" ) {

		return "1-10"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		return "1-9"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		return "1-15"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}
}
