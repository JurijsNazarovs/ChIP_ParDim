#!/usr/bin/env bds
#vim: syntax=java

include "general.bds"


grp_shape_subgraph	:= "box"
grp_shape_box 		:= "box"
grp_shape_node 		:= "ellipse"
grp_fontsize_box 	:= 12
grp_fontsize_node 	:= 10
grp_color_subgraph	:= "gainsboro"
grp_color_node 		:= "whitesmoke"
grp_color_edge		:= "gray"
grp_style_subgraph 	:= "filled,rounded"
grp_style_node 		:= "filled,rounded"

grp_color_trim_adapter 	:= "darkorange"
grp_color_bwa 		:= "salmon"
grp_color_bwt2		:= "salmon"
grp_color_dedup_bam 	:= "lightcoral"
grp_color_xcor 		:= "yellowgreen"
grp_color_sigtrk 	:= "yellow"
grp_color_spp		:= "skyblue"
grp_color_macs2		:= "lightgreen"
grp_color_idr 		:= "limegreen" 
grp_color_ataqc 	:= "pink"
grp_color_naive_overlap := "skyblue"
grp_color_idr_final	:= "pink" 

string{} nodes // key: file type, contents: 1 line node definition
string{} boxes // key: box name, contents: 1 line node definition
string{} links // key: replicate/control id (rep1, ctl1, ...), contents: multiple links for replicate

string[] tmp_labels // for thready safety
string[] tmp_links

rpt_aux_dir 	:= ""


init_report_graphviz()


void init_report_graphviz() {

	rpt_aux_dir 	= mkdir_path( "$out_dir/report" )
}

string _html_graphviz() { // graphviz diagram

	wait // for thread safety

	html := "<div id='graphviz'><b>Workflow diagram</b>&nbsp<small>(rep : Replicate, ctl : Control, pr : Pseudo-replicate, ppr : Pooled pseudo-replicate)</small><br>"

	prefix := title=="" ? "" : (title+"_")

	dot 	:= "$rpt_aux_dir/$prefix"+"workflow.dot"
	svg 	:= "$rpt_aux_dir/$prefix"+"workflow.svg"

	dot_contents := "digraph {\n\nrankdir=LR\n\nnode [shape=$grp_shape_node,style=\"$grp_style_node\",margin=0,fontsize=$grp_fontsize_node];" + \
			"\nedge [color=$grp_color_edge,fontsize=$grp_fontsize_node];\n\n";

	for ( string node : nodes ) dot_contents += (node + "\n")
	for ( string box : boxes ) dot_contents += (box + "\n")

	for ( int i=0; i<tmp_labels.size(); i++) {
		label := tmp_labels[i]
		link := tmp_links[i]

		if ( links.hasKey(label) ) {
			links{label} += link
		}
		else {
			links{label} = link
		}
	}

	for ( string key : links.keys() ) {

		if ( key == "" ) continue
			
		link := links{key}

		if ( key == "outside" ) {

			dot_contents += link+"\n\n";
		}
		else {
			subgraph := "subgraph cluster_"+key.replace("-","_")+" {\n\n"
			subgraph += link+"\n"
			subgraph += "color=\"$grp_color_subgraph\";"
			subgraph += "style=\"$grp_style_subgraph\";"
			subgraph += "label=\"$key\";"
			subgraph += "}\n\n"

			dot_contents += subgraph
		}	
	}

	dot_contents += "\n\n}"

	dot.write( dot_contents )

	// run graphviz
	taskName := "report"
	system := "local" // do not use cluster engine for this task
	
	task {
		sys $shcmd_init
		sys dot -Tsvg $dot > $svg
	}

	html += "<object data='"+ get_rel_path( svg ) + "'></object></div><br>"
	html += "</div><br>\n"

	return html
}

// add graphviz element (in -> box -> out)
void _add_to_graphviz( string[] in_id, string[] in_path, string[] out_id, string[] out_path, string box, string box_color ) {

	// {in1, in2, ...} -> box -> {out1, out2, ...}		

	if ( box == "" ) {

		for ( int i=0; i< min(in_id.size(),in_path.size()); i++ )  {

			if ( in_id[i] == "" || in_path[i] == "" ) continue

			in 	:= in_id[i]
			in 	= in.replace("_","\\n")
			path 	:= "../" + get_rel_path( in_path[i] ) // ../ is because .svg is located at $out_dir/report/

			in_label	:= _get_label( in )
			in_id_wo_label	:= _rm_label( in )

			nodes{in} = "\t\"$in\" [label=\"$in\",id=\"$in\",style=\"$grp_style_node\",fillcolor=$grp_color_node,tooltip=\"$path\",href=\"$path\"];"

			for ( int j=0; j<min(out_id.size(),out_path.size()); j++ ) {

				if ( out_id[j] == "" || out_path[j] == "" ) continue

				out 	:= out_id[j]
				out 	= out.replace("_","\\n") //.substr( out_.lastIndexOf("/")+1 ).replace("_","\\n")
				path 	:= "../" + get_rel_path( out_path[j] )

				out_label 	:= _get_label( out )
				out_id_wo_label	:= _rm_label( out )

				nodes{out} = "\t\"$out\" [label=\"$out\",id=\"$out\",style=\"$grp_style_node\",fillcolor=$grp_color_node,tooltip=\"$path\",href=\"$path\"];"

				if ( in_label == out_label ) 	tmp_labels.add(in_label)
				else 				tmp_labels.add("outside")
				tmp_links.add("\t\"$in\" -> \"$out\";\n")
			}
		}
	}
	else {
		box = box.replace("_","\\n")

		box_label 	:= _get_label( box )
		box_id_wo_label := _rm_label( box ).toUpper().replace("\\N","\\n")

		boxes{box} = "\t\"$box\" [label=\"$box_id_wo_label\",fontsize=$grp_fontsize_box,shape=$grp_shape_box,style=\"$grp_style_node\",fillcolor=$box_color];"

		for ( int i=0; i< min(in_id.size(),in_path.size()); i++ )  {

			if ( in_id[i] == "" || in_path[i] == "" ) continue

			in 	:= in_id[i]
			in 	= in.replace("_","\\n")
			path 	:= "../" + get_rel_path( in_path[i] ) // ../ is because .svg is located at $out_dir/report/

			in_label	:= _get_label( in )
			in_id_wo_label	:= _rm_label( in )

			nodes{in} = "\t\"$in\" [label=\"$in\",id=\"$in\",style=\"$grp_style_node\",fillcolor=$grp_color_node,tooltip=\"$path\",href=\"$path\"];"

			if ( in_label == box_label && box_label != "" ) tmp_labels.add(in_label)
			else 						tmp_labels.add("outside")
			tmp_links.add("\t\"$in\" -> \"$box\";\n")
		}

		for ( int j=0; j<min(out_id.size(),out_path.size()); j++ ) {

			if ( out_id[j] == "" || out_path[j] == "" ) continue

			out 	:= out_id[j]
			out 	= out.replace("_","\\n") //.substr( out_.lastIndexOf("/")+1 ).replace("_","\\n")
			path 	:= "../" + get_rel_path( out_path[j] )

			out_label 	:= _get_label( out )
			out_id_wo_label	:= _rm_label( out )

			nodes{out} = "\t\"$out\" [label=\"$out\",id=\"$out\",style=\"$grp_style_node\",fillcolor=$grp_color_node,tooltip=\"$path\",href=\"$path\"];"

			if ( out_label == box_label && box_label != "" )	tmp_labels.add(out_label)
			else 							tmp_labels.add("outside")
			tmp_links.add("\t\"$box\" -> \"$out\";\n")
		}
	}
}

void _add_to_graphviz( string[] in_id, string[] in_path, string[] out_id, string[] out_path ) {

	_add_to_graphviz( in_id, in_path, out_id, out_path, "", "" )
}

string _get_label( string id ) { // get (rep?), (ctl?) in id

	a := id.lastIndexOf("(")
	b := id.lastIndexOf(")")

	if ( a > -1 && b > -1 && a < b ) {
		id.substr(a+1,b)
	}
	else {
		return ""
	}
}

string _rm_label( string id ) {

	a := id.lastIndexOf("(")
	b := id.lastIndexOf(")")

	if ( a > -1 && b > -1 && a < b ) {
		return rm_str_at_end( rm_str_at_end( id.substr(0,a), "\\n" ), "_" )
	}
	else {
		return id
	}	
}
