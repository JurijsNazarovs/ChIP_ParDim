#!/usr/bin/env bds
#vim: syntax=java

## Prior parameters
include "basicFunctions"

## Main body
main() 

## Functions description

void main() { 
	out_dir = mkdir(out_dir)

	html := _html_filetable() 	// treeview for directory and file structure 
	#html += _html_chipseq_tracks() 	// epigenome browser tracks
	html += _html_graphviz()	// graphviz workflow diagram
	#html += _html_chipseq_QC()	// show QC tables and images

	report( html )
}

string _html_chipseq_QC() {

	string[] flagstat_qcs, dup_qcs, flagstat_nodup_qcs, pbc_qcs, xcor_qcs, xcor_plots
	string[] flagstat_headers, dup_headers, flagstat_nodup_headers, pbc_headers, xcor_headers

	for ( int ctl=0; ctl <= 1; ctl++) { // iterate through inputs (ctl==0 : exp. replicate, ctl==1 : control)	
		if ( ctl==1 && !ctl_exists() ) continue		
	
		for ( int rep=1; rep <= get_num_rep( ctl ); rep++) {

			if ( !input_file_exists( ctl, rep ) ) continue

			info := get_info_str( ctl, rep )
			key := "$ctl,$rep"

			if ( ctl == 0 ) {
				//html_rep_by_id += _html_xcor( info, 	[ info ], [ xcor_qc{key} ], [ xcor_plot{key} ], [ info ] )

				if ( xcor_qc.hasKey( key ) )	{
					xcor_qcs 		+= xcor_qc{key}
					xcor_plots 		+= xcor_plot{key}

					xcor_headers 		+= info
				}
			}

			if ( flagstat_qc.hasKey( key ) ) 	flagstat_qcs 		+= flagstat_qc{key}
			if ( dup_qc.hasKey( key ) ) 		dup_qcs 		+= dup_qc{key}
			if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_qcs 	+= flagstat_nodup_qc{key}
			if ( pbc_qc.hasKey( key ) ) 		pbc_qcs			+= pbc_qc{key}

			if ( flagstat_qc.hasKey( key ) ) 	flagstat_headers 	+= info
			if ( dup_qc.hasKey( key ) ) 		dup_headers 		+= info
			if ( flagstat_nodup_qc.hasKey( key ) )	flagstat_nodup_headers 	+= info
			if ( pbc_qc.hasKey( key ) ) 		pbc_headers		+= info

		}
	}	

	html := "<div id='chipseq_qc'>"
	
	html += _parse_flagstat_to_html( "all", 	flagstat_headers, flagstat_qcs, flagstat_headers )
	html += _parse_dup_to_html( "all", 		dup_headers, dup_qcs, dup_headers )
	html += _parse_flagstat_to_html( "all, filtered",flagstat_nodup_headers, flagstat_nodup_qcs, flagstat_nodup_headers )
	html += _parse_pbc_to_html( "all", 		pbc_headers, pbc_qcs, pbc_headers )
	html += _parse_xcor_to_html( "all", 		xcor_headers, xcor_qcs, xcor_plots, xcor_headers )

	// if idr qc's exists, add them to html
	if ( idr_qc != "" ) 		html += _parse_idr_to_html( "idr", idr_qc )

	for ( int i=1; i<=get_num_rep(); i++ ) {
		
		for ( int j=i+1; j<=get_num_rep(); j++ ) {
			if ( idr_tr_png.hasKey("$i,$j") ) html += _html_img( idr_tr_png{"$i,$j"}, 800, "true reps (rep$i-rep$j)" ) + "&nbsp"
		}

		if ( !true_rep ) {
			if ( idr_pr_png.hasKey(i) ) html += _html_img( idr_pr_png{i}, 800, "rep$i pseudo-reps" ) + "&nbsp"
		}
	}		

	if ( idr_ppr_png != "" ) 	html += _html_img( idr_ppr_png, 800, "pooled pseudo-reps" ) + "&nbsp"

	html += "</div><br>"
	return html
}

string _html_chipseq_tracks() {

	string[] trk_files, trk_types, trk_names

	if ( pval_bigwig.hasKey( "pooled" ) ) { trk_types += "bigwig"; trk_names += "$title pval (pooled)"; trk_files += pval_bigwig{"pooled"} }
	if ( fc_bigwig.hasKey( "pooled" ) )   { trk_types += "bigwig"; trk_names += "$title fc (pooled)";   trk_files += fc_bigwig{"pooled"}   }

	if ( peak_overlap != "" ) { trk_types += "hammock"; trk_names += "$title peak overlap"; trk_files += _peak_to_hammock( peak_overlap ) }

	if ( idr_opt != "" ) {	trk_types += "hammock"; trk_names += "$title peak idr (opt. set)"; trk_files += _peak_to_hammock( _get_idr_peak_trk( idr_opt ) ) }
	if ( idr_consv != "" ) {trk_types += "hammock"; trk_names += "$title peak idr (cons. set)"; trk_files += _peak_to_hammock( _get_idr_peak_trk( idr_consv ) ) }

	for (int rep=1; rep<=get_num_rep(); rep++) {

		if ( pval_bigwig.hasKey( "rep$rep" ) ) { trk_types += "bigwig"; trk_names += "$title pval (rep$rep)"; trk_files += pval_bigwig{"rep$rep"} }
		if ( fc_bigwig.hasKey( "rep$rep" ) )   { trk_types += "bigwig"; trk_names += "$title fc (rep$rep)";   trk_files += fc_bigwig{"rep$rep"}   }
		if ( idr_pr.hasKey(rep) ) {trk_types += "hammock"; trk_names += "$title peak idr (rep$rep-pr)"; trk_files += _peak_to_hammock( _get_idr_peak_trk( idr_pr{rep} ) ) }
	}

	html := _html_epg_browser_viz( trk_files, trk_types, trk_names )

	return html
}
