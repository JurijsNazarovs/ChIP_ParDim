#!/usr/bin/env bds
#vim: syntax=java

## Included modules

include "modules/input_bam.bds"
include "modules/input_tagalign.bds"
include "modules/input_peak.bds"

include "modules/species.bds" #here are all definitions of chromosome size, blacklist and etc

include "modules/report.bds"

include "modules/align_bwa.bds"
include "modules/postalign_bam.bds"
include "modules/postalign_bed.bds"

include "modules/callpeak_spp.bds"
include "modules/callpeak_etc.bds"
include "modules/callpeak_naive_overlap.bds"

include "modules/idr.bds"
include "modules/signal.bds"

include "modules/conf.bds"
include "modules/signal_macs2.bds"


## Default variables for all files in the pipeline

help == chipseq pipeline settings ==

pe 		:= false 	#Paired end data.
callpeak 	:= "spp"	#Peak calling method : spp and macs2, can choose both (default: 'spp,macs2').
true_rep   	:= false	#Call peaks on true replicates only.
ctl_depth_ratio := 1.2 		#Cut-off ratio of two control tagaligns for pooling (default: 1.2).
sigtrk 		:= ""		#(BETA) Signal track generation method : bam2bw (bamCoverage in deepTools) or tag2bw (align2rawsignal).
make_wig 	:= false	#Create wig (for '-sigtrk tag2bw' only).
idr_thresh 	:= "0.05"	#IDR threshold : -log_10(score) (default: 0.05).
no_naive_overlap:= false 	#No naive overlap threshold for peaks.
subsample_xcor 	:= "15M"	## reads to be subsampled for cross corr. analysis (default: 15M).
subsample 	:= "0" 		## reads to subsample exp. replicate. Subsampled tagalign will be used for steps downstream (default: 0; no subsampling).
subsample_ctl 	:= "0" 		## reads to subsample control if non-zero (recommended: 40M or lower).
nth_1_ctl 	:= false 	#Force to use 1 thread for mapping control.
bw_for_pooled_rep_only := false #Generate signal tracks for pooled replicate only with MACS2.
#xcor_for_pooled_rep := false 	#Perform cross-correlation analysis to get fragment length for pooled replicate.

input 			:= ""
num_ctl 		:= 1
nreads_subsample_xcor 	:= 15000000
nreads_subsample 	:= 0
nreads_subsample_ctl 	:= 0

ctl			:= 0 #no ctrl, i.e. replicate
rep			:= 1 #replicate number
pr			:= 0 #no pseudo replicates
#possibleInps		:= ["bam", "filt_bam", "tag", "ctl_bam", "ctl_filt_bam", "ctl_tag", "xcor_qc", "peak"]

## Functions' description

bool is_callpeak_spp() {

  return callpeak.toLower().indexOf("spp")>=0
}

bool is_callpeak_macs2() {

  return callpeak.toLower().indexOf("macs")>=0
}

bool is_sigtrk_aln2rawsig() {

  return sigtrk.toLower().indexOf("aln")>=0 || sigtrk.toLower().indexOf("align")>=0 || sigtrk.toLower().indexOf("tag")>=0
}

bool is_sigtrk_deeptools() {

  return sigtrk.toLower().indexOf("deep")>=0 || sigtrk.toLower().indexOf("bam")>=0
}


bool is_input_bam() {

  return input.toLower() == "bam"
}

bool is_input_filt_bam() {

  return input.toLower() == "filt_bam"
}

bool is_input_tag() {

  return input.toLower() == "tag" || input.toLower() == "tagalign"
}

bool is_input_peak() {

  return input.toLower() == "peak"
}

#int get_num_rep() {
#
#	if (is_input_bam())  	 return get_num_rep_bam()
#	else if (is_input_filt_bam())  return get_num_rep_filt_bam()
#	else if (is_input_tag()) 	 return get_num_rep_tag()
#	else if (is_input_peak()) 	 return get_num_rep_peak()
#
#	return 0
#}

bool is_paired_end(int ctl, int rep) {

  return pe
}

bool is_single_ended(int ctl, int rep) {

  return !is_paired_end(ctl, rep)
}

bool is_paired_end() {

  return is_paired_end(0, 1)
}

bool is_single_ended() {

  return !is_paired_end()
}

bool is_data_available(int ctl, int rep) {

  if ((ctl==1) && (rep>2)) return false

     if (is_input_bam()) {
	  return get_bam(ctl, rep) != ""
	}
	else if (is_input_filt_bam()) {
		  return get_filt_bam(ctl, rep) != ""
	        }
	        else if (is_input_tag()) {
		          return get_tag(ctl, rep) != ""
	                }
	                else {
		       return false
	             }
}

#bool control_exists() {
#
#	for (int rep=1; rep<=get_num_rep(); rep++) {
#
#		if (is_data_available(1, rep)) return true
#	}
#
#	return false
#}

string get_info(int ctl, int rep) {

  return ((ctl>0) ? "ctl" : "rep") + rep
}

## These function are rewritten because I did not like the input format

string get(string key){

  if (cmd_line_arg_has_key(key)) {
       return get_path(get_cmd_line_arg_val(key))
     } else if (conf.hasKey(key)) {
       return get_path(conf{key})
     }

     return ""
}

int getN(string key){#get Numeric
	             if (key == "rep" || key == "ctl" || key == "pr"){
		          int result

		          if (cmd_line_arg_has_key(key)) {
			       result = get_cmd_line_arg_val(key).parseInt()
		             } else if (conf.hasKey(key)) {
			       result = conf{key}.parseInt()
		             } else { #If no arguments in cmd_line or in conf_file then default values
			       if (key == "rep") result = 1
			          else result = 0
		             }

		             if (key == "ctl"  && (result != 0 && result != 1))\
			            error("Wrong input! $key = $result, but has to be 0 or 1.")
		                return result
	                } else error("Unsupported argument")
                    }

string get_xcor_qc(int rep){
  key := "xcor_qc"
  key2 := "xcor_qc" + rep


  if (rep==1 && cmd_line_arg_has_key(key)) {
       return get_path(get_cmd_line_arg_val(key))
     }
     else if (cmd_line_arg_has_key(key2)) {
	       return get_path(get_cmd_line_arg_val(key2))
	     } else if (rep == 1 && conf.hasKey(key)) {
	       return get_path(conf{key})
	     } else if (conf.hasKey(key2)) {
	       return get_path(conf{key2})
	     }

	     return ""
}

int get_xcor_qc_num(){
  
  rep := 1
  while(get_xcor_qc(rep) != "") rep++

       return rep - 1
}

int getNumInpCmd(string[] key, bool exact) {

  # This function counts the number of matches among arguments. 
  # For example, number of writen words -bam (but not existing inputs)
  # Or -bam1111121212 and etc.

  # If exact == true, then the number of exact matches count
  # If exact == false. then the number of (label[1-9][0-9]*) matches count
  numInp := 0
  if (exact){
       for (string k : key){	
	     for (int i = 0; i < args.size(); i++){
		   arg := args[i]
		   if (arg.toLower().trim() == "-" + k.toLower()) numInp++
		 }			
	   }
     } else {
       for (string k : key){	
	     for (int i = 0; i < args.size(); i++){
		   argTmp := args[i].split("[1-9][0-9]*")
		   if (argTmp.size() == 1){
			arg := argTmp[0]
			if (arg == args[i]) continue #i.e. we catch the exact match
			   if (arg.toLower().trim() == "-" + k.toLower()) numInp++
		      }
		 }		
	   }
     }

     return numInp
}

int getNumInpCmdChk(string key){
  # This function returns the numbers of "right" inputs coresponding to key
  # Example of a right input: peak, peak2, peak3 OR peak1, peak2, peak3, OR peak, OR peak1
  # Everything else is not right!

  int numInp 	
  label1 := key + 1 #stupid but nothing I can do better
  label2 := key + 2

  numInp= getNumInpCmd([key], 1) + getNumInpCmd([key], 0) #number of exact key + key*number*
  if(numInp != 0){
      if (numInp > 1){
	   # Check key and key1
	   if (getNumInpCmd([key], 1) + getNumInpCmd([key + 1], 1) != 1)\
		  error("Wrong input! Possible reasons:\n\
		  - no $key or $label1 is provided\n\
		  - $key and $label1 are provided in the same time\n\
		  - duplicates of $key or $label1.\n")

	      # If everything is ok before, then we have more then one peak,
	      # thus we need to check that we have peak1, peak2, ...
	      # and not peak, peak2
	      if (getNumInpCmd([key], 1) != 0)\
		     error("Wrong input!\n\
		It should be $label1, $label2, ... and\n\
		not $key, $label2, ...\n")

		 # If everything is ok before then we have peak2, ... 			
		 # Check for not unique and not sequential
		 for (int rep = 2; rep <= numInp; rep++){
		       if (getNumInpCmd([key + rep], 1) != 1)\
			      error("Wrong input!\n\
		It should be $label1, $label2, ... No jumps, no repeats.\n")
		     }
	 } else if (getNumInpCmd([key], 0) > 0)\
		     error("Wrong input!\n\
		It should be $key without any numbers,\n\
		since the sequence is not provided.\n")
    } 

    return numInp
}


int[] getNumInpCmdChkArr(string[] key){
  # This function returns the array of numbers of "right" inputs coresponding to array key

  int[] numInp 
  for (int i=0; i < key.size(); i++){
	numInp[i] = getNumInpCmdChk(key[i])	
      }

      return numInp
}


void chkInpFile(string inp, string label, bool seq){
  string strMain = "On this step an input has to be $label! Entry is empty.\n\t\t"
  string str	

  if (seq) str = strMain
     else str = strMain + "No numbers are allowed!"

	  if (inp == "")\
		 error(str)
	     else if (!path_exists(inp))\
		         error("$label - file not found!\n")
}


##  Error message functions, which is repeated quite often
void errorMsg(string key){

  if (key == "ctl"){
       if (cmd_line_arg_has_key(key) || conf.hasKey(key))\
	      error("Wrong input!\n
		An option \"-$key <integer>\" is provided.\n\
		Please, delete it.\n")
     } else if (key == "true_rep"){
       if (cmd_line_arg_has_key(key) || conf.hasKey(key))\
	      error("Wrong input!\n\
		An option \"-$key <bool>\" is provided.\n\
		Please delete it.\n\
		To indicate the name of pseudo replicate use an option \"-pr <integer>\".\n")
	  
     } else if (key == "pr"){
       if (cmd_line_arg_has_key(key) || conf.hasKey(key))\
	      error("Wrong input!\n\
		An option \"-$key <integer>\" is provided.\n\
		Please delete it.\n\
	       	To indicate whether consider just true replicate or not,\n\
		use an option \"-true_rep <bool>\".\n")
     } else if (key == "rep"){
       if (cmd_line_arg_has_key(key) || conf.hasKey(key))\
	      error("Wrong input!\n\
		An option \"-$key <integer>\" is provided.\n\
		Please delete it.\n")
     }

}


void peakToBigBed(string regionPeakOrig){
  string regionPeak, regionPeakClip, regionPeakClipSort 
  string regionPeakBb #final
  string asTable, asFile = regionPeakOrig.dirName() + "/regionPeak.as"
  regionPeak = rm_ext(regionPeakOrig, ".gz")
  regionPeakClip =  regionPeak  + ".clip"
  regionPeakClipSort = regionPeakClip + ".sort"
  regionPeakBb = regionPeak + ".bb"

  # Fill as table and create corresponding file
  asTable = "table narrowPeak\n\
\"BED6+4 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\"\n\
(\n\
    string chrom;        \"Reference sequence chromosome or scaffold\"\n\
    uint   chromStart;   \"Start position in chromosome\"\n\
    uint   chromEnd;     \"End position in chromosome\"\n\
    string name;         \"Name given to a region (preferably unique). Use . if no name is assigned\"\n\
    uint   score;        \"Indicates how dark the peak will be displayed in the browser (0-1000) \"\n\
    char[1]  strand;     \"+ or - or . for unknown\"\n\
    float  signalValue;  \"Measurement of average enrichment for the region\"\n\
    float  pValue;       \"Statistical significance of signal value (-log10). Set to -1 if not used.\"\n\
    float  qValue;       \"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\"\n\
    int   peak;         \"Point-source called for this peak; 0-based offset from chromStart. Set to -1 if no point-source called.\"\n\
)"
  asFile.write(asTable)

  # Tranformation
  task{
    sys $shcmd_init
    
    sys if [ -f "$regionPeak" ]; then rm -rf "$regionPeak"; fi #delete unzipped file
    sys gunzip $regionPeakOrig
    sys bedtools slop -i "$regionPeak"  -g "$chrsz" -b 0 |\
        bedClip stdin "$chrsz" "$regionPeakClip"
    sys perl -pi -e 'chomp;@_=split;if ($_[4]>1000) {$_[4]=1000} $_=join("\t",@_)."\n"'\
        $regionPeakClip

    sys sort -k1,1 -k2,2n "$regionPeakClip" > "$regionPeakClipSort"
    
    sys bedToBigBed -type=bed6+4 -as="$asFile" "$regionPeakClipSort"\
        "$chrsz" "$regionPeakBb"
    
    sys rm -rf "$asFile" "$regionPeakClip" "$regionPeakClipSort"
    sys gzip "$regionPeak"

    sys $shcmd_finalize
  }

}
