#!/usr/bin/env bds
#vim: syntax=java

## Prior parameters
include "basicFunctions"

## Main body
main() 

## Functions description

void main() { 
	out_dir = mkdir(out_dir)

	init_chipseq()
	align_tagPR() #conversion to ".tag" and pseudo replicates creation
}

void init_chipseq() {
	## Initial checking
	errorMsg("pr")

	## Determine input type
	possibleInps := ["bam", "filt_bam"]

	int numInps
	for (string key : possibleInps)\
		numInps += getNumInpCmdChk(key)	

	if (numInps != 1)\
		error ("Wrong input!\n\
		It has to be 1 of $possibleInps and no numbers in names.\n\
		Other inputs are ignored.\n\
		To indicate the ctl replicate use an option \"-ctl 1\"")	

	if (get("bam") != "") 			input = "bam"
	else if (get("filt_bam") != "")		input = "filt_bam"

	## Check input 
	chk_input()

	## Read Parameters
	ctl = getN("ctl")
	rep = getN("rep") 

	pe = get_conf_val_bool(pe, ["pe"])
	true_rep = get_conf_val_bool(true_rep, ["true_rep"])
}

void chk_input() {
	if (input == "")\
		error("Supported format was not found!\n\
		It should be bam or filt_bam. No numbers are allowed!")
   
	string data

	prefix := (ctl==1) ? "Control " : ""
	suffix := is_paired_end(ctl, rep) ? " (PE)" : " (SE)"

	if (is_input_bam()) {
		prefix = prefix +"Rep$rep bam" + suffix
		data = get("bam")
	}
	else if (is_input_filt_bam()) {
		prefix = prefix +"Rep$rep filt_bam" + suffix
		data = get("filt_bam")
	}

	print("$prefix :\n")
	if (!path_exists(data))\
		error("File not found!\n")
}

void align_tagPR() {
	print("\n\n[Start] To tag \n")

	if (is_single_ended(ctl, rep)) 	_align_tagPR_SE(ctl, rep, nth)
	else 				_align_tagPR_PE(ctl, rep, nth)

	print("\n[End]  To tag \n\n")
}

void _align_tagPR_SE(int ctl, int rep, int nth_rep) {
	info 	:= get_info(ctl, rep)
	aln_o_dir := mkdir("$out_dir/align/$info") #create align output directory
	qc_o_dir  := mkdir("$out_dir/qc/$info") #create qc output dir.

	string filt_bam_
	if (is_input_bam()) {
		string bam	
		bam = get("bam")

		filt_bam_Tmp := _dedup_bam(bam, aln_o_dir, qc_o_dir, info, nth_rep)
		filt_bam_ = filt_bam_Tmp[0] #take the first argument since it is array
		wait
	}

	if (is_input_filt_bam() || is_input_bam()) {
            if (is_input_filt_bam()) filt_bam_ = get("filt_bam")
	    _bam_to_tag(filt_bam_, aln_o_dir, info)
            wait
	}	
}

void _align_tagPR_PE(int ctl, int rep, int nth_rep){
	error("PE version is still not supported")
}
